Q: At a high level, how would you go about changing the code so that when we
   reach the end of our allocated heap, we end the program with
   "Error: out of memory!"? This way the programmer actually knows what went
   wrong, instead of just seeing "segfault".

   The point here is _not_ to describe Garbage Collection, quite the opposite,
   we only want a clearer error message. You should describe what parts of the
   compiler need to change and how, but you are not expected to implement these
   changes, only reason through them and explain your reasoning.



A: We currently have no access to the heap_size varible declared in runtime.h 
   when executing our assembly. We only know if we go out of bounds because we seg fault. 
   We could add some kind of counter variable to our compiler to keep track of how
   many objects we have in our heap and increment them as we allocate them, 
   but it would create a lot of unnecessary assembly operations.
   Or, we could compute the "maximum address" our heap is allowed to be,
   then check our heap pointer never exceeds this value. 

   To do this, we need to somehow give our assembler access to the size of the heap.
   Option 1, we update our (compile-e e c) function to call some external C function 
   like sizeof() on the heap to find the size of the heap. However, that seems very combursome. 
   Option 2, is we must pass the size of the heap to our compiler from our runtime system. 

   Option 2 is better because passing the size of the pointer to 
   our compiler from our run time system is less complex and less computationally expensive
   than calling out to something like a sizeof() function. The System V Application Binary Interface 
   defines %rsi as the 2nd argument to C functions, so we can use this to pass
   the size of our heap from our main.c runtime system to our compile.rkt compiler. 

   We need to update the runtime system's main.c call from entry(heap) to entry(heap, heap_size) 
   and then in compile.rkt we need to update our compiler's top level function (compile-e e) 
   to save this register in an unused callee-saved register such as %r12 to avoid losing it. 

   Now we can compute the address where we run out of memory by adding the size of our heap 
   to our starting memory address for the heap pointer saved in %rbx. 
   We could then save this "max-heap-size address" back into %r12.

   Now that we know our max heap heap size address is in %r12, we need to make sure that 
   our current heap address never exceeds this value when we construct 
   a box or a cons cell in compile-ops.rkt; and I am sure there may some finer grain details 
   about passing an integer literal to our compiler, using this integer literal, 
   computing the "max-heap-size", bounds checking with "max-heap-size" etc. 
   but these are all discussed from a higher level like the question asks.



Q: With the context from your answer to the first part: what would the
   instructions emitted for `box` look like with all of your changes? Feel free
   to use some pseudo-code, but you should still be specifying things
   concretely. So if you need labels, don't worry about generating appropriate
   labels with gensym, we aren't running your code, we just need to get the idea.


A: Based on the answer above, we now know the address of where we run out of memory 
   is saved in our callee-saved register %r12 and we need to create a function 
   called (assert-heap-capacity), that ensures our current heap pointer's address has
   not exceeded the address where will run out of heap, and then invoke it in box.
   We assume our label 'raise_heap_exceeded will use the extern raise_error
   to return "Error: out of memory!" to the programmer when executing the assembly
   our compiler generates.

   ;; assert heap is not full
   (define (assert-heap-capacity)
      (seq (assert-integer r)
         ;; compare max_heap_size address %r10 to current address heap %rbx stored in %rax due to calling convention
            (Cmp r10 rax)
         ;; if they are greater than or equal, we are at heap capacity, jump to error "Error: out of memory!"
            (Je 'raise_heap_exceeded)))

   (seq 
      (assert-heap-capacity)
      (Mov (Offset rbx 0) rax)
      (Mov rax rbx)
      (Or rax type-box)
      (Add rbx 8))